SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DOTFILES_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

echo $DOTFILES_DIR

__dotfiles__common() {
  if [ -d "$HOME/bin" ]; then
    export PATH="$HOME/bin:$PATH"
  fi

  if [ -d "$HOME/scripts" ]; then
    export PATH="$HOME/scripts:$PATH"
  fi

  if [ -d "$HOME/.local/bin" ]; then
    export PATH="$HOME/.local/bin:$PATH"
  fi

  export AWS_DEFAULT_REGION=ap-southeast-2
  export AWS_REGION=ap-southeast-2
  export EDITOR=nvim
  export WINEARCH=win64

  # aliases
  source "$DOTFILES_DIR/aliases"

  # z directory jumper
  [ -f "$HOME/src/z/z.sh" ] && source ~/src/z/z.sh || echo "Please clone z directory jumper to /src (git@github.com:rupa/z.git)"
  zstyle ':completion:*' menu select
  zstyle ':completion:*' rehash true
  autoload -U promptinit

  promptinit

  # This will set the default prompt to the walters theme
  prompt walters
}

__dotfiles__pyenv() {
  if which pyenv > /dev/null 2>&1; then
    echo "Setting up Pyenv"

    export PATH="$HOME/.pyenv/shims:$PATH"
    eval "$(pyenv init -)"
  else
    echo "Pyenv is not installed"
  fi
}

__dotfiles__pipx() {
  if which pipx > /dev/null 2>&1; then
    echo "Setting up pipx"

    export PATH="$HOME/.local/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(register-python-argcomplete pipx)"
  else
    echo "pipx is not installed"
  fi
}

__dotfiles__yarn_global_bin() {
  if yarn global bin 1>/dev/null 2>&1; then
    export PATH="$(yarn global bin 2>/dev/null):$PATH"
  fi
}


__dotfiles__common_tail() {
  which direnv 1>/dev/null 2>&1 && eval "$(direnv hook zsh)" || echo "Direnv is not installed"
  __dotfiles__pyenv
  __dotfiles__pipx
  __dotfiles__yarn_global_bin

  if [[ -f "$HOME/.cargo/env" ]]; then
    source "$HOME/.cargo/env"
  fi
}

__dotfiles__osx() {
  if [ -f /opt/homebrew/bin/brew ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  fi

  if [ -r "$(brew --prefix)/share/zsh-completions" ]; then
    if type brew &>/dev/null; then
        FPATH=$(brew --prefix)/share/zsh-completions:$FPATH

        autoload -Uz compinit
        compinit
    fi
    [[ kubectl ]] && source /dev/stdin <<<"$(kubectl completion zsh)"
  else
    echo "Please install zsh-completions"
  fi

  if [ -s "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" ]; then
    export NVM_DIR="$HOME/.nvm"
    \. "$HOMEBREW_PREFIX/opt/nvm/nvm.sh" # This loads nvm
    \. "$HOMEBREW_PREFIX/opt/nvm/etc/bash_completion.d/nvm" # This loads nvm bash_completion
    \. "$DOTFILES_DIR/nvm/zsh_hook" # auto nvm use on cd
  fi

  # if [ -s "$HOMEBREW_PREFIX/opt/zsh-git-prompt/zshrc.sh" ]; then
  #   source "$HOMEBREW_PREFIX/opt/zsh-git-prompt/zshrc.sh"
  # fi
}

__dotfiles__ubuntu() {
  if [ -f "/opt/bash-git-prompt/gitprompt.sh" ]; then
    __GIT_PROMPT_DIR=/opt/bash-git-prompt
    source "/opt/bash-git-prompt/gitprompt.sh"
  else
    echo "Please install gitprompt using the install script in dotfiles"
  fi

  if [ -f "/usr/share/nvm/init-nvm.sh" ]; then
    echo "Sourcing nvm"
    source /usr/share/nvm/init-nvm.sh
  else
    echo "Please install nvm"
  fi

  if [ -f "$HOME/.poetry/env" ]; then
    if [ -f "$HOME/.local/bin/poetry" ]; then
      printf "\033[0;31mWARNING: poetry was detected in .poetry and .local/bin/poetry\033[0m\n"
      echo "The installation at ~/.poetry/bin will be ignored."
    else
      export PATH="$HOME/.poetry/bin:$PATH"
      source $HOME/.poetry/env
    fi
  else
    echo "Please install Poetry - https://python-poetry.org/docs/"
  fi

  if type _init_completion > /dev/null; then
    kubectl > /dev/null 2>&1 && source <(kubectl completion bash)
  else
    echo "Please install zsh-completion"
  fi

  if systemctl status swagger-editor --no-pager > /dev/null 2>&1; then
    echo -e "\nLocal Swagger server available.\n Start with 'systemctl start swagger-editor'\n then browse to: http://127.0.0.1:9898/\n"
  fi
}

__dotfiles__common

case "$OSTYPE" in
  darwin*)
    echo "Setting up OSX (Homebrew) environment"
    __dotfiles__osx
  ;;
  linux*)
    echo "Setting up Ubuntu/Arch environment"
    __dotfiles__ubuntu
  ;;
  *)
    echo "unknown: $OSTYPE"
  ;;
esac

__dotfiles__common_tail

[ -r ~/.zsh_local ] && source ~/.zsh_local
