#!/usr/bin/env bash -e

SOURCE=${BASH_SOURCE[0]}
while [ -L "$SOURCE" ]; do # resolve $SOURCE until the file is no longer a symlink
  DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )
  SOURCE=$(readlink "$SOURCE")
  [[ $SOURCE != /* ]] && SOURCE=$DIR/$SOURCE # if $SOURCE was a relative symlink, we need to resolve it relative to the path where the symlink file was located
done
DOTFILES_DIR=$( cd -P "$( dirname "$SOURCE" )" >/dev/null 2>&1 && pwd )

__dotfiles__common() {
  if [ -d "$HOME/bin" ]; then
    export PATH="$HOME/bin:$PATH"
  fi

  if [ -d "$HOME/scripts" ]; then
    export PATH="$HOME/scripts:$PATH"
  fi

  if [ -d "$HOME/.local/bin" ]; then
    export PATH="$HOME/.local/bin:$PATH"
  fi

  if [ -d "$HOME/.cargo/bin" ]; then
    export PATH="$HOME/.cargo/bin:$PATH"
  fi

  export AWS_DEFAULT_REGION=ap-southeast-2
  export AWS_REGION=ap-southeast-2
  export EDITOR=nvim
  export WINEARCH=win64
  export RUBY_ENV=development

  # shellcheck source=./aliases
  source "$DOTFILES_DIR/aliases"

  # z directory jumper
  [ -f "$HOME/src/z/z.sh" ] && source ~/src/z/z.sh || echo "Please clone z directory jumper to /src (git@github.com:rupa/z.git)"
}

__dotfiles__ruby_fallback() {
  echo "Please install chruby via the package manager"
  if which ruby > /dev/null 2>&1; then
    echo "Setting up a user-based GEM_HOME"
    export GEM_HOME="$(ruby -e 'puts Gem.user_dir')"
    export PATH="$GEM_HOME/bin:$PATH"
  fi
}

__dotfiles__golang() {
  if which go > /dev/null 2>&1; then
    echo "Setting up Golang"
    export GOPATH=$HOME/go

    if [ ! -d $GOPATH ]; then
      echo "Creating $GOPATH"
      mkdir $GOPATH
    fi

    export PATH="$GOPATH/bin:$PATH"
  else
    echo "Golang is not installed"
  fi
}

__dotfiles__pyenv() {
  if which pyenv > /dev/null 2>&1; then
    echo "Setting up Pyenv"

    export PATH="$HOME/.pyenv/shims:$PATH"
    eval "$(pyenv init -)"
  else
    echo "Pyenv is not installed"
  fi
}

__dotfiles__pipx() {
  if which pipx > /dev/null 2>&1; then
    echo "Setting up pipx"

    export PATH="$HOME/.local/bin:$PATH"
    eval "$(pyenv init -)"
    eval "$(register-python-argcomplete pipx)"
  else
    echo "pipx is not installed"
  fi
}

__dotfiles__yarn_global_bin() {
  if yarn global bin 1>/dev/null 2>&1; then
    export PATH="$(yarn global bin 2>/dev/null):$PATH"
  fi
}


__dotfiles__common_tail() {
  which direnv 1>/dev/null 2>&1 && eval "$(direnv hook bash)" || echo "Direnv is not installed"
  __dotfiles__golang
  __dotfiles__pyenv
  __dotfiles__pipx
  __dotfiles__yarn_global_bin

  if [[ -f "$HOME/.cargo/env" ]]; then
    source "$HOME/.cargo/env"
  fi
}

__dotfiles__osx() {
  if [[ -r "/usr/local/etc/profile.d/bash_completion.sh" ]]; then
    export BASH_COMPLETION_COMPAT_DIR="/usr/local/etc/bash_completion.d"
    . "/usr/local/etc/profile.d/bash_completion.sh"
    [[ kubectl ]] && source /dev/stdin <<<"$(kubectl completion bash)"
  else
    echo "Please install bash-completion"
  fi

  PS1='\A \w \n$ '
  # if [ -f "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh" ]; then
  #   __GIT_PROMPT_DIR=$(brew --prefix)/opt/bash-git-prompt/share
  #   source "$(brew --prefix)/opt/bash-git-prompt/share/gitprompt.sh"
  # fi

  if [ -f "/usr/local/opt/chruby/share/chruby/chruby.sh" ]; then
    source /usr/local/opt/chruby/share/chruby/chruby.sh
    source /usr/local/opt/chruby/share/chruby/auto.sh
  else
    __dotfiles__ruby_fallback
  fi
}

__dotfiles__ubuntu() {
  if [ -f "/opt/bash-git-prompt/gitprompt.sh" ]; then
    __GIT_PROMPT_DIR=/opt/bash-git-prompt
    source "/opt/bash-git-prompt/gitprompt.sh"
  else
    echo "Please install gitprompt using the install script in dotfiles"
  fi

  if [ -f "/usr/local/share/chruby/chruby.sh" ]; then
    source /usr/local/share/chruby/chruby.sh
    source /usr/local/share/chruby/auto.sh
  else
    __dotfiles__ruby_fallback
  fi

  if [ -f "/usr/share/nvm/init-nvm.sh" ]; then
    echo "Sourcing nvm"
    source /usr/share/nvm/init-nvm.sh
    # source "${DOTFILES_DIR}/nvm/bash_hook"
  else
    echo "Please install nvm"
  fi

  if [ -f "$HOME/.poetry/env" ]; then
    if [ -f "$HOME/.local/bin/poetry" ]; then
      printf "\033[0;31mWARNING: poetry was detected in .poetry and .local/bin/poetry\033[0m\n"
      echo "The installation at ~/.poetry/bin will be ignored."
    else
      export PATH="$HOME/.poetry/bin:$PATH"
      source $HOME/.poetry/env
    fi
  else
    echo "Please install Poetry - https://python-poetry.org/docs/"
  fi

  if type _init_completion > /dev/null; then
    kubectl > /dev/null 2>&1 && source <(kubectl completion bash) || echo "Kubectl is not installed"
  else
    echo "Please install bash-completion"
  fi

  if systemctl status swagger-editor --no-pager > /dev/null 2>&1; then
    echo -e "\nLocal Swagger server available.\n Start with 'systemctl start swagger-editor'\n then browse to: http://127.0.0.1:9898/\n"
  fi
}

__dotfiles__common

case "$OSTYPE" in
  darwin*)
    echo "Setting up OSX (Homebrew) environment"
    __dotfiles__osx
  ;;
  linux*)
    echo "Setting up Ubuntu/Arch environment"
    __dotfiles__ubuntu
  ;;
  *)
    echo "unknown: $OSTYPE"
  ;;
esac

__dotfiles__common_tail

[ -r ~/.bash_local ] && source ~/.bash_local
